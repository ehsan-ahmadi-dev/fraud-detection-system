#pragma checksum "D:\fruad\FraudPortal\Views\Grid\Refine-old.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "ad6cfcab347764bc8d88be106756330bc97a13d3"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Grid_Refine_old), @"mvc.1.0.view", @"/Views/Grid/Refine-old.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\fruad\FraudPortal\Views\_ViewImports.cshtml"
using FraudPortal;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\fruad\FraudPortal\Views\_ViewImports.cshtml"
using FraudPortal.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\fruad\FraudPortal\Views\_ViewImports.cshtml"
using FraudPortal.Data;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"ad6cfcab347764bc8d88be106756330bc97a13d3", @"/Views/Grid/Refine-old.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"df4508d6aef8f81db4d12c5960ec08915790e3a5", @"/Views/_ViewImports.cshtml")]
    public class Views_Grid_Refine_old : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/grid/grid-et.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 2 "D:\fruad\FraudPortal\Views\Grid\Refine-old.cshtml"
  
    ViewData["Title"] = "Refine";
    Layout = "~/Views/Shared/_Layout.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n<h1>Refine</h1>\r\n\r\n\r\n<div id=\"myGrid\" class=\"ag-theme-alpine\" style=\"height: 500px\"></div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n");
            DefineSection("Scripts", async() => {
                WriteLiteral("\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ad6cfcab347764bc8d88be106756330bc97a13d34009", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"

    <script type=""text/javascript"">

        const gridOptions = {

            // each entry here represents one column
            columnDefs: [
                { field: ""id"", minWidth: 100 },
                { field: ""date_id"", minWidth: 200 },
                { field: ""rull_id"", minWidth: 200 },
                { field: ""condition"" },
                { field: ""period"" },
                { field: ""price"" },
                { field: ""typePeriod"" },
                { field: ""risk"" },
                { field: ""price"" },
                { field: ""sourcePan"" },
                { field: ""destinationSECPAN"" },
                { field: ""encryptDestinationPAN"" },
                { field: ""terminal"" },
                { field: ""user_Id"" },
                { field: ""guildTitle"" },
                { field: ""bankBin"" },
                { field: ""prCode_Id"" },
                { field: ""posConnectionType"" },
                { field: ""countOfTransaction_Success"" },
                { field: ""co");
                WriteLiteral(@"untOfTransaction_unSuccess"" },
                { field: ""amount_Success"" },
                { field: ""amount_unSuccess"" },
                { field: ""countOfTerminal"" },
                { field: ""countOfSourcePan"" },
                { field: ""countOfRepeat"" },
                { field: ""diffTime1"" },
                { field: ""diffTime2"" },
                { field: ""p_Unsucsess"" },
                { field: ""p_SorcePan"" },
                { field: ""detail1"" },
                { field: ""detail2"" },
                { field: ""detail3"" },
                { field: ""detail4"" },
            ],

            // default col def properties get applied to all columns
            defaultColDef: { sortable: true, filter: true, flex: 1, minWidth: 100, resizable: true, },

            /*rowSelection: 'multiple',*/ // allow rows to be selected
            animateRows: true, // have rows animate to new positions when sorted
            rowModelType: 'serverSide',
            serverSideInfiniteScroll: true,
 ");
                WriteLiteral(@"           cacheBlockSize: 500000,
            maxBlocksInCache: 2,
            //debug: true,
        };

        // setup the grid after the page has finished loading
        document.addEventListener('DOMContentLoaded', function () {
            var gridDiv = document.querySelector('#myGrid');
            new agGrid.Grid(gridDiv, gridOptions);


                    // setup the fake server with entire dataset
                    var fakeServer = createFakeServer();

                    // create datasource with a reference to the fake server
                    var datasource = createServerSideDatasource(fakeServer);

                    // register the datasource with the grid
                    gridOptions.api.setServerSideDatasource(datasource);
        });

         function createServerSideDatasource(server) {
            return {
                getRows: async (params) => {
                    console.log('[Datasource] - rows requested by grid: ', params.request);

        ");
                WriteLiteral(@"            // get data for request from our fake server
                    var response =await  server.getData(params.request);

                        if ( response.success) {
                            // supply rows for requested block to grid
                            params.success({
                                rowData: response.rows,
                                rowCount: response.lastRow,
                            });
                        } else {
                            params.fail();
                        }
                   
                },
            };
        }

          function  createFakeServer() {
            return {
                getData: async (request) => {
                    // take a slice of the total rows for requested block
                    var result = {
                        success: false,
                        rows: null,
                        lastRow: null,
                    };;
                    var rowsFor");
                WriteLiteral(@"Block ;
                    var lastRow;
                   await  $.get(""/grid/refineData?startRow="" + request.startRow + ""&endRow="" + request.endRow , (data)=>{
                        rowsForBlock = data;
                        debugger;
                        // here we are pretending we don't know the last row until we reach it!
                        lastRow = getLastRowIndex(request, rowsForBlock);
                        result ={
                            success: true,
                            rows: rowsForBlock,
                            lastRow: lastRow,
                        };
                    })

                    return result;

                },
            };
        }

        function getLastRowIndex(request, results) {
            if (!results) return undefined;
            var currentLastRow = (request.startRow || 0) + results.length;

            // if on or after the last block, work out the last row, otherwise return 'undefined'
            r");
                WriteLiteral("eturn currentLastRow < (request.endRow || 0) ? currentLastRow : undefined;\r\n        }\r\n    </script>\r\n\r\n");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
