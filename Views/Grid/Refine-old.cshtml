
@{
    ViewData["Title"] = "Refine";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Refine</h1>


<div id="myGrid" class="ag-theme-alpine" style="height: 500px"></div>






@section Scripts {
    <script src="~/lib/grid/grid-et.min.js"></script>

    <script type="text/javascript">

        const gridOptions = {

            // each entry here represents one column
            columnDefs: [
                { field: "id", minWidth: 100 },
                { field: "date_id", minWidth: 200 },
                { field: "rull_id", minWidth: 200 },
                { field: "condition" },
                { field: "period" },
                { field: "price" },
                { field: "typePeriod" },
                { field: "risk" },
                { field: "price" },
                { field: "sourcePan" },
                { field: "destinationSECPAN" },
                { field: "encryptDestinationPAN" },
                { field: "terminal" },
                { field: "user_Id" },
                { field: "guildTitle" },
                { field: "bankBin" },
                { field: "prCode_Id" },
                { field: "posConnectionType" },
                { field: "countOfTransaction_Success" },
                { field: "countOfTransaction_unSuccess" },
                { field: "amount_Success" },
                { field: "amount_unSuccess" },
                { field: "countOfTerminal" },
                { field: "countOfSourcePan" },
                { field: "countOfRepeat" },
                { field: "diffTime1" },
                { field: "diffTime2" },
                { field: "p_Unsucsess" },
                { field: "p_SorcePan" },
                { field: "detail1" },
                { field: "detail2" },
                { field: "detail3" },
                { field: "detail4" },
            ],

            // default col def properties get applied to all columns
            defaultColDef: { sortable: true, filter: true, flex: 1, minWidth: 100, resizable: true, },

            /*rowSelection: 'multiple',*/ // allow rows to be selected
            animateRows: true, // have rows animate to new positions when sorted
            rowModelType: 'serverSide',
            serverSideInfiniteScroll: true,
            cacheBlockSize: 500000,
            maxBlocksInCache: 2,
            //debug: true,
        };

        // setup the grid after the page has finished loading
        document.addEventListener('DOMContentLoaded', function () {
            var gridDiv = document.querySelector('#myGrid');
            new agGrid.Grid(gridDiv, gridOptions);


                    // setup the fake server with entire dataset
                    var fakeServer = createFakeServer();

                    // create datasource with a reference to the fake server
                    var datasource = createServerSideDatasource(fakeServer);

                    // register the datasource with the grid
                    gridOptions.api.setServerSideDatasource(datasource);
        });

         function createServerSideDatasource(server) {
            return {
                getRows: async (params) => {
                    console.log('[Datasource] - rows requested by grid: ', params.request);

                    // get data for request from our fake server
                    var response =await  server.getData(params.request);

                        if ( response.success) {
                            // supply rows for requested block to grid
                            params.success({
                                rowData: response.rows,
                                rowCount: response.lastRow,
                            });
                        } else {
                            params.fail();
                        }
                   
                },
            };
        }

          function  createFakeServer() {
            return {
                getData: async (request) => {
                    // take a slice of the total rows for requested block
                    var result = {
                        success: false,
                        rows: null,
                        lastRow: null,
                    };;
                    var rowsForBlock ;
                    var lastRow;
                   await  $.get("/grid/refineData?startRow=" + request.startRow + "&endRow=" + request.endRow , (data)=>{
                        rowsForBlock = data;
                        debugger;
                        // here we are pretending we don't know the last row until we reach it!
                        lastRow = getLastRowIndex(request, rowsForBlock);
                        result ={
                            success: true,
                            rows: rowsForBlock,
                            lastRow: lastRow,
                        };
                    })

                    return result;

                },
            };
        }

        function getLastRowIndex(request, results) {
            if (!results) return undefined;
            var currentLastRow = (request.startRow || 0) + results.length;

            // if on or after the last block, work out the last row, otherwise return 'undefined'
            return currentLastRow < (request.endRow || 0) ? currentLastRow : undefined;
        }
    </script>

}